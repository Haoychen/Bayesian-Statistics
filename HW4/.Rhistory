lines(xfit, yfit, col = 'blue', lwd = 2)
box()
h&minds
h$mids
help(diff)
d <- density(mtcars$mpg)
polygon(d, col = 'red', border = 'blue')
plot(d)
polygon(d, col = 'red', border = 'blue')
help(polygon)
install('sm')
install.packages('sm')
par()
par(mfrow = c(1, 1))
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4, 6, 8), labels = c('4 cylinder', '6 cylinder', '8 cylinder'))
sm.density.compare(mpg, cyl)
sm.density.compare(mpg, cyl.f)
cyl
sm.density.compare(mpg, cyl.f)
cyl
sm.density.compare(mpg, cyl)
par(mfrow = c(1, 1))
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4, 6, 8), labels = c('4 cylinder', '6 cylinder', '8 cylinder'))
sm.density.compare(mpg, cyl)
colfill <- c(2: (1 + length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill = colfill)
cyl.f
box(mpg ~ cyl, data = mtcars, notch = TRUE, varwidth = TRUE)
boxplot(mpg ~ cyl, data = mtcars, notch = TRUE, varwidth = TRUE)
install.packages('vioplot')
library(vioplot)
within(mtcars,{
x1 <- mpg[cyl == 4]
x2 <- mpg[cyl == 6]
x3 <- mpg[cyl == 8]
})
with(mtcars,{
x1 <<- mpg[cyl == 4]
x2 <<- mpg[cyl == 6]
x3 <<- mpg[cyl == 8]
})
within(mtcars,{
x1 <- mpg[cyl == 4]
x2 <- mpg[cyl == 6]
x3 <- mpg[cyl == 8]
})
vioplot(x1, x2, x3)
library(Hmisc)
myvars <- c('mpg', 'hp', 'wt')
describe(mtcars[myvars])
install.packages('pastecs')
library(pastecs)
myvar <- c('mpg', 'hp', 'wt')
stat.desc(mtcars[myvar])
install.packages('psych')
install.packages('doBy')
library(vcd)
install.packages('vcd')
install.packages("vcd")
library(vcd)
head(Arthritis)
install.packages('gmodels')
help(addmargins)
t_value <- 2.142884
2 * pt(t_value, 43)
2 * (1 - pt(t_value, 43))
qt(0.975, 43)
t_value <- 2.1429
pt(t_value, 43)
y <- c(40, 41, 43, 42, 44, 42, 43, 42)
x <- c(0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0)
m1 <- lm(y ~ x)
summary(m1)
anova(m1)
x_bar <- mean(x)
x_bar
ssx <- sum((x - x_bar) ** 2)
ssx
1.2877 / 10.5
sqrt(0.122638)
0.8842 * 0.8842
10.5 * 10.5
1.2877 * (1 / 8 + 110.25 / 10.5)
2.25 ** 2
1.2877 * (1 / 8 + 5.0625 / 10.5)
x <- c(0.3, 1.4, 1.0, -0.3, -0.2, 1.0, 2.0, -1.0, -0.7, 0.7)
y <- c(0.4, 0.9, 0.4, -0.3, 0.3, 0.8, 0.7, -0.4, -0.2, 0.7)
m1 <- lm(y ~ x)
summary(m1)
setwd("~/Coding/R")
census.data <- read.table("census.csv", header = T)
head(census.data)
census.data <- read.csv("census.csv", header = T)
head(census.data)
census.sample <- census.data[is.na(census.data) == FALSE]
head(census.sample)
census.sample <- census.data[is.na(census.data$outcome) == FALSE,]
head(census.sample)
census.prediction <- census.data[is.na(census.data$outcome) == TRUE,]
head(census.prediction)
census.data <- read.csv("census.csv", header = T)
with(census.data, {
educ <<- factor(educ)
status <<- factor(status)
race <<- factor(race)
gender <<- factor(gender)
})
census.sample <- census.data[is.na(census.data$outcome) == FALSE,]
census.prediction <- census.data[is.na(census.data$outcome) == TRUE,]
head(census.sample)
character(census.data$educ)
character(census.data$age)
help(character)
is.factor(census.data$educ)
logistic.fit = glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
summary(logistic.fit)
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
summary(logistic.fit)
library(ISLR)
set.seed(1)
library(boot)
cv.err <- cv.glm(census.sample, logistic.fit)
dim(census.sample)
library(MASS)
help(qda)
qda.fit <- qda(outcome ~ age + educ + status + race + gender + hrs, data = census.sample)
summary(qda.fit)
predict(qda, newdata = data.frame(age = 10, educ = 'Bachelor', Status = 'Divorced', race = 'white', gender = 'Female'))
head(census.sample)
predict(qda, newdata = census.sample[1, 1 - 7], gender = 'Female'))
predict(qda, newdata = census.sample[1, c(1-7)], gender = 'Female'))
predict(qda, newdata = census.sample[1, c(1, 2, 3, 4, 5, 6)], gender = 'Female'))
predict(qda, newdata = census.sample[1, c(1, 2, 3, 4, 5, 6)])
predict(qda, newdata = census.sample[1, 1 : 6])
predict(qda, census.sample[1, 1 : 6])
predict(qda, census.sample[, 1:6])
predict(qda.fit, census.sample[, 1:6])
predict(qda.fit, census.sample[1, 1:6])
predict(qda.fit, census.sample[1:2, 1:6])
qda.class <- predict(qda.fit, census.sample[, 1:6])$class
table(qda.class, census.sample[, 7])
mean(qda.calss == census.sample[, 7])
mean(qda.class == census.sample[, 7])
logistic.fit <- predict(logistic.fit, census.sample[, 1:6])$class
predict(logistic.fit, census.sample[, 1:6])
predict(logistic.fit, census.sample[1, 1:6])
predict(logistic.fit, census.sample[1:2, 1:6])
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
predict(logistic.fit, census.sample[1:2, 1:6])
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = "binomial")
predict(logistic.fit, census.sample[1:2, 1:6])
predict(logistic.fit, census.sample[1:10, 1:6])
predict(logistic.fit, census.sample[1:10, 1:6], type = 'response')
logistic.value <- predict(logistic.fit, census.sample[, 1:6], type = 'response')
mean(logistic.value)
logistic.value[logistic.value >= .5] = 1
logistic.value[logistic.value < .5] = 0
table(logistic.value, census.sample[, 7])
mean(logistic.value == census.sample[, 7])
step(logistic.fit, direction = "both")
step(logistic.fit, direction = "backward")
logistic.value <- predict(logistic.fit, census.prediction[, 1:6])
head(logistic.value)
logistic.value <- predict(logistic.fit, census.prediction[, 1:6], type = "response")
head(logistic.value)
logistic.value[logistic.value > .5] <- 1
logistic.value[logistic.value < .5] <- 0
head(logistic.value)
dim(logistic.value)
census.prediction$outcome <- logistic.value
output.data <- rbind(census.sample[, 7: 8], census.prediction[, 7: 8])
head(output.data)
output.data <- output.data[, c('id', 'outcome')]
head(output.data)
output.data <- output.data[order(output.data$id),]
head(output.data)
View(output.data)
predict(qda.fit, census.prediction[,1: 6])$class
predict(qda.fit, census.prediction[1,1: 6])$class
head(census.prediction)
predict(qda.fit, census.prediction[2,1: 6])$class
predict(qda.fit, census.prediction[3,1: 6])$class
predict(qda.fit, census.prediction[1:6,1: 6])$class
write.table(output.data, "hw5.txt")
write.table(output.data, "hw5.txt", sep = '\t')
View(output.data)
write.table(output.data, "hw5.txt", sep = '\t')
help(write.table)
dim(output.data)
write.table(output.data, "hw5.txt", sep = '\t')
write.table(output.data, "hw5.txt", col.names = c("id", "outcome"), row.names = output.data[,1] sep = '\t')
write.table(output.data, "hw5.txt", col.names = c("id", "outcome"), row.names = output.data[,1], sep = '\t')
write.table(output.data, "hw5.csv")
write.table(output.data, "hw5.csv", sep = '\t')
View(output.data)
write.csv(output.data, "hw5.csv")
input.data <- read.table("hw5.txt", header = T)
head(input.data)
View(census.data)
View(census.prediction)
census.data <- read.csv("census.csv", header = T)
with(census.data, {
educ <<- factor(educ)
status <<- factor(status)
race <<- factor(race)
gender <<- factor(gender)
})
census.sample <- census.data[is.na(census.data$outcome) == FALSE,]
census.prediction <- census.data[is.na(census.data$outcome) == TRUE,]
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
logistic.value <- predict(logistic.fit, census.prediction[, 1:6], type = 'response')
logistic.value[logistic.value > .5] <- 1
logistic.value[logistic.value < .5] <- 0
output.data <- cbind(logistic.value, census.prediction[,8])
View(output.data)
write.table(logistc.value, 'output.txt', sep = '\t')
write.table(logistic.value, 'output.txt', sep = '\t')
write.table(logistic.value, 'output.txt', sep = '\t', colname = c('id', 'outcome'))
write.table(output.data, 'output.txt', sep = '\t')
output <- output[,c(2,1)]
output.data <- output.data[,c(2,1)]
write.table(output.data, 'output.txt', sep = '\t')
dim(output.data)
names(output.data) <- c('id', 'outcome')
write.table(output.data, 'output.txt', sep = '\t')
write.table(output.data, 'output.txt', sep = '\t')
library(FSelector)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
updateR()
??updateR
library(installr)
install.packages('dplyr')
help(dplyr)
install.packages('knitr')
vignette('datatable-intro')
install.packages(plotly)
install.packages('plotly')
??boxcox
??dpyr
help(pt)
sqrt(0.006)
sqrt(0.006) * 1.96
1.32 + 0.152
1.32 - 0.152
-0.634 -0.152
-0.634 + 0.152
setwd("~/Courses/Bayesian-Statistics/HW4")
#a.
x <- read.table("meta.asc.txt")
x <- x[,-1]
y <- -log(x[,1]/(x[,2]-x[,1]))+log(x[,3]/(x[,4]-x[,3]))
sigma <- sqrt(1/x[,1]+1/(x[,2]-x[,1])+1/x[,3]+1/(x[,4]-x[,3]))
tau <- seq(0.001,2.0,0.001)
posterior <- vector()
mu <- vector()
for(i in 1:length(tau))
{
mu.est <- sum(y / (sigma^2 + tau[i]^2)) / sum(1 / (sigma^2 + tau[i]^2))
v.mu <- 1 / sum(1 / (sigma^2 + tau[i]^2))
prior <- 1
mu[i] <- rnorm(1, mean = mu.est, sd = sqrt(v.mu))
posterior[i] <- prior * sqrt(v.mu) * prod((sigma^2 + tau[i]^2) ^ (-0.5) * exp(-(y - mu.est) ^ 2 / (2 * (sigma^2 + tau[i]^2))))
}
plot(tau, posterior, type='l', xlim=c(0, 0.6))
x <- read.table("meta.asc.txt")
x <- x[,-1]
x <- read.table("meta.asc.txt")
View(x)
header
x <- read.table("meta.asc.txt", head = T)
View(x)
x <- read.table("meta.asc.txt", head = T)
x <- x[,-1]
y <- -log(x[,1]/(x[,2]-x[,1]))+log(x[,3]/(x[,4]-x[,3]))
sigma <- sqrt(1/x[,1]+1/(x[,2]-x[,1])+1/x[,3]+1/(x[,4]-x[,3]))
tau <- seq(0.001,2.0,0.001)
posterior <- vector()
mu <- vector()
for(i in 1:length(tau))
{
mu.est <- sum(y / (sigma^2 + tau[i]^2)) / sum(1 / (sigma^2 + tau[i]^2))
v.mu <- 1 / sum(1 / (sigma^2 + tau[i]^2))
prior <- 1
mu[i] <- rnorm(1, mean = mu.est, sd = sqrt(v.mu))
posterior[i] <- prior * sqrt(v.mu) * prod((sigma^2 + tau[i]^2) ^ (-0.5) * exp(-(y - mu.est) ^ 2 / (2 * (sigma^2 + tau[i]^2))))
}
plot(tau, posterior, type='l', xlim=c(0, 0.6))
theta<-matrix(rep(NA,length(y)*length(tau)),length(y),length(tau))
theta.mean<-matrix(rep(NA,length(y)*length(tau)),length(y),length(tau))
theta.sd<-matrix(rep(NA,length(y)*length(tau)),length(y),length(tau))
for(i in 1:length(y))
for(j in 1:length(tau))
{
{
mu<-sum(y/(sigma^2+tau[j]^2))/sum(1/(sigma^2+tau[j]^2))
mean1=(y[i]/sigma[i]^2+mu/tau[j]^2)/(1/sigma[i]^2+1/tau[j]^2)
v<-1/(1/sigma[i]^2+1/tau[j]^2)
theta[i,j]=rnorm(1,mean=mean1,sd=sqrt(v))
theta.mean[i,j]=mean1
theta.sd[i,j]<-sqrt(v)
}
}
plot(tau,theta.mean[1,],type='l',ylim=c(-1,0.5),ylab="Estimated Treatment Effect")
for(i in 1:21)
{
lines(tau,theta.mean[(i+1),],col=i)
}
plot(tau,theta.sd[1,],type='l',ylim=c(0,1),ylab="Posterior Standard Deviation")
for(i in 1:21)
{
lines(tau,theta.sd[(i+1),],col=i)
}
median<-apply(theta,1,median)
plot(median,y,pch=20)
text(median,y,1:J,pos=2,cex=0.6)
abline(a=0,b=1)
abline(v=mean(theta))
#d
theta.new<-vector()
for(i in 1:length(tau)){
foo<-sample(length(posterior),1,prob=posterior)
tau.new<-tau[foo]
mu.new<-sum(y/(sigma^2+tau.new^2))/sum(1/(sigma^2+tau.new^2))
theta.new[i]<-rnorm(1,mean=mu.new,sd=tau.new)
}
hist(theta.new,main="histogram of simulations for theta.new|y",breaks=20)
#d
theta.new<-vector()
for(i in 1:length(tau)){
foo<-sample(length(posterior),1,prob=posterior)
tau.new<-tau[foo]
mu.new<-sum(y/(sigma^2+tau.new^2))/sum(1/(sigma^2+tau.new^2))
theta.new[i]<-rnorm(1,mean=mu.new,sd=tau.new)
}
hist(theta.new,main="simulation from posterior distributionof a new treatment effect",breaks=20)
y<-c(16+58,99,58,70,19+103,77,18+86,17+112,35+273,55+64)
n<-100
log.a.dev.b<-seq(3,7,length.out=n)
log.b<-seq(-8,-1,length.out=n)
log.m.post<-matrix(0,n,n)
phi<-0.001
for (i in 1:n){
for (j in 1:n){
b<-exp(log.b[j])
a<-exp(log.a.dev.b[i])*b
su<-0
for (s in 1:10){
su<-su+a*log(b)-(a+y[s])*log(b+1)+lgamma(a+y[s])-lgamma(a)
}
log.m.post[i,j]<-phi*(log(a*b)-a-b)+su
}
}
log.m.post<-log.m.post-max(log.m.post)
m.post<-exp(log.m.post)
contour(log.a.dev.b, log.b, m.post,drawlabels=F,
xlab="log(a/b)", ylab="log(b)", main="marginal posterior")
y <- c(16+58, 99, 58, 70, 19+103, 77, 18+86, 17+112, 35+273, 55+64)
n <- 100
log_alpha_over_beta <- seq(3,7, length.out=n)
log_beta <- seq(-8,-1,length.out=n)
log.m.post <- matrix(0,n,n)
phi<-0.001
for (i in 1:n){
for (j in 1:n){
beta <- exp(log_beta[j])
alpha <- exp(log_alpha_over_beta[i]) * b
su <- 0
for (s in 1:10){
su <- su + alpha * log(beta) - (alpha + y[s]) * log(beta+1) + lgamma(alpha + y[s]) - lgamma(alpha)
}
log.m.post[i,j] <- phi * (log(alpha * beta) - alpha - beta) + su
}
}
log.m.post <- log.m.post - max(log.m.post)
m.post <- exp(log.m.post)
contour(log_alpha_over_beta, log_beta, m.post,drawlabels=F,
xlab="log(alpha/beta)", ylab="log(beta)", main="marginal posterior")
y <- c(16+58, 99, 58, 70, 19+103, 77, 18+86, 17+112, 35+273, 55+64)
n <- 100
log_alpha_over_beta <- seq(3,7, length.out=n)
log_beta <- seq(-8,-1,length.out=n)
log.m.post <- matrix(0,n,n)
phi<-0.001
for (i in 1:n){
for (j in 1:n){
beta <- exp(log_beta[j])
alpha <- exp(log_alpha_over_beta[i]) * beta
su <- 0
for (s in 1:10){
su <- su + alpha * log(beta) - (alpha + y[s]) * log(beta+1) + lgamma(alpha + y[s]) - lgamma(alpha)
}
log.m.post[i,j] <- phi * (log(alpha * beta) - alpha - beta) + su
}
}
log.m.post <- log.m.post - max(log.m.post)
m.post <- exp(log.m.post)
contour(log_alpha_over_beta, log_beta, m.post,drawlabels=F,
xlab="log(alpha/beta)", ylab="log(beta)", main="marginal posterior")
m <- 100
alpha.sim<-rep(0, m)
beta.sim<-rep(0, m)
log_alpha_over_beta.sim <- rep(0, m)
log_beta.sim <- rep(0, m)
dev.m.post <- rowSums(m.post)
for (s in 1:m){
i<-sample(m,1,prob=dev.m.post)
j<-sample(m,1,prob=m.post[i,])
log_alpha_over_beta.sim[s]<-log_alpha_over_beta[i]
log_beta.sim[s] <- log_beta[j]
beta.sim[s] <- exp(log_beta[j])
alpha.sim[s] <- exp(log_alpha_over_beta.sim[i]) * beta.sim[s]
}
points(log_alpha_over_beta.sim, log_beta.sim, pch=20,cex=0.6,col=4)
par(mfrow=c(1,2))
plot(beta.sim ~ alpha.sim)
plot(log_beta.sim ~ log_alpha_over_beta.sim)
plot(beta.sim ~ alpha.sim)
y <- c(16+58, 99, 58, 70, 19+103, 77, 18+86, 17+112, 35+273, 55+64)
n <- 100
log_alpha_over_beta <- seq(3,7, length.out=n)
log_beta <- seq(-8,-1,length.out=n)
log.m.post <- matrix(0,n,n)
phi<-0.001
for (i in 1:n){
for (j in 1:n){
beta <- exp(log_beta[j])
alpha <- exp(log_alpha_over_beta[i]) * beta
su <- 0
for (s in 1:10){
su <- su + alpha * log(beta) - (alpha + y[s]) * log(beta+1) + lgamma(alpha + y[s]) - lgamma(alpha)
}
log.m.post[i,j] <- phi * (log(alpha * beta) - alpha - beta) + su
}
}
log.m.post <- log.m.post - max(log.m.post)
m.post <- exp(log.m.post)
contour(log_alpha_over_beta, log_beta, m.post,drawlabels=F,
xlab="log(alpha/beta)", ylab="log(beta)", main="marginal posterior")
m <- 100
alpha.sim<-rep(0, m)
beta.sim<-rep(0, m)
log_alpha_over_beta.sim <- rep(0, m)
log_beta.sim <- rep(0, m)
dev.m.post <- rowSums(m.post)
for (s in 1:m){
i<-sample(m,1,prob=dev.m.post)
j<-sample(m,1,prob=m.post[i,])
log_alpha_over_beta.sim[s]<-log_alpha_over_beta[i]
log_beta.sim[s] <- log_beta[j]
beta.sim[s] <- exp(log_beta[j])
alpha.sim[s] <- exp(log_alpha_over_beta.sim[i]) * beta.sim[s]
}
points(log_alpha_over_beta.sim, log_beta.sim, pch=20,cex=0.6,col=4)
par(mfrow=c(1,2))
plot(beta.sim ~ alpha.sim)
plot(log_beta.sim ~ log_alpha_over_beta.sim)
y<-c(16+58,99,58,70,19+103,77,18+86,17+112,35+273,55+64)n<-100log.a.dev.b<-seq(3,7,length.out=n)log.b<-seq(-8,-1,length.out=n)log.m.post<-matrix(0,n,n)phi<-0.001     for (i in 1:n){          for (j in 1:n){                 b<-exp(log.b[j])                 a<-exp(log.a.dev.b[i])*b                                  su<-0                     for (s in 1:10){                           su<-su+a*log(b)-(a+y[s])*log(b+1)+lgamma(a+y[s])-lgamma(a)                         }                                          log.m.post[i,j]<-phi*(log(a*b)-a-b)+su                       }         }log.m.post<-log.m.post-max(log.m.post)m.post<-exp(log.m.post)contour(log.a.dev.b, log.b, m.post,drawlabels=F,          + xlab="log(a/b)", ylab="log(b)", main="marginal posterior")
y<-c(16+58,99,58,70,19+103,77,18+86,17+112,35+273,55+64)
n<-100
log.a.dev.b<-seq(3,7,length.out=n)
y<-c(16+58,99,58,70,19+103,77,18+86,17+112,35+273,55+64)
n<-100
log.a.dev.b<-seq(3,7,length.out=n)
log.b<-seq(-8,-1,length.out=n)
log.m.post<-matrix(0,n,n)
phi<-0.001
for (i in 1:n){
for (j in 1:n){
b<-exp(log.b[j])
a<-exp(log.a.dev.b[i])*b
su<-0
for (s in 1:10){
su<-su+a*log(b)-(a+y[s])*log(b+1)+lgamma(a+y[s])-lgamma(a)
}
log.m.post[i,j]<-phi*(log(a*b)-a-b)+su
}
}
log.m.post<-log.m.post-max(log.m.post)
m.post<-exp(log.m.post)
contour(log.a.dev.b, log.b, m.post,drawlabels=F,
+ xlab="log(a/b)", ylab="log(b)", main="marginal posterior")
contour(log.a.dev.b, log.b, m.post,drawlabels=F,           xlab="log(a/b)", ylab="log(b)", main="marginal posterior")
contour(log.a.dev.b, log.b, m.post,drawlabels=F,
xlab="log(a/b)", ylab="log(b)", main="marginal posterior")
par(mfrow=c(1,1))
contour(log.a.dev.b, log.b, m.post,drawlabels=F,
xlab="log(a/b)", ylab="log(b)", main="marginal posterior")
m<-100
a.sim<-rep(0,m)
b.sim<-rep(0,m)
log.a.dev.b.s<-rep(0,m)
log.b.s<-rep(0,m)
dev.m.post<-rowSums(m.post)
for (s in 1:m){
i<-sample(m,1,prob=dev.m.post)
j<-sample(m,1,prob=m.post[i,])
log.a.dev.b.s[s]<-log.a.dev.b[i]
log.b.s[s]<-log.b[j]
b.sim[s]<-exp(log.b[j])
a.sim[s]<-exp(log.a.dev.b[i])*b.sim[s]
}
points(log.a.dev.b.s, log.b.s, pch=20,cex=0.6,col=4)
par(mfrow=c(1,2))
plot(b.sim~a.sim, xlab = 'alpha.sim', ylab = 'beta.sim')
plot(log.b.s~log.a.dev.b.s, xlab = 'log(alpha.sim/beta.sim)', ylab = 'log(beta.sim)')
